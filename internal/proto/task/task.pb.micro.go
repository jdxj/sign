// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: task/task.proto

package task

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for TaskService service

func NewTaskServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for TaskService service

type TaskService interface {
	CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...client.CallOption) (*CreateTaskResponse, error)
	GetTask(ctx context.Context, in *GetTaskRequest, opts ...client.CallOption) (*GetTaskResponse, error)
	GetTasks(ctx context.Context, in *GetTasksRequest, opts ...client.CallOption) (*GetTasksResponse, error)
	UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...client.CallOption) (*emptypb.Empty, error)
	DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...client.CallOption) (*emptypb.Empty, error)
	DispatchTasks(ctx context.Context, in *DispatchTasksRequest, opts ...client.CallOption) (*emptypb.Empty, error)
}

type taskService struct {
	c    client.Client
	name string
}

func NewTaskService(name string, c client.Client) TaskService {
	return &taskService{
		c:    c,
		name: name,
	}
}

func (c *taskService) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...client.CallOption) (*CreateTaskResponse, error) {
	req := c.c.NewRequest(c.name, "TaskService.CreateTask", in)
	out := new(CreateTaskResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) GetTask(ctx context.Context, in *GetTaskRequest, opts ...client.CallOption) (*GetTaskResponse, error) {
	req := c.c.NewRequest(c.name, "TaskService.GetTask", in)
	out := new(GetTaskResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) GetTasks(ctx context.Context, in *GetTasksRequest, opts ...client.CallOption) (*GetTasksResponse, error) {
	req := c.c.NewRequest(c.name, "TaskService.GetTasks", in)
	out := new(GetTasksResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "TaskService.UpdateTask", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "TaskService.DeleteTask", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) DispatchTasks(ctx context.Context, in *DispatchTasksRequest, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "TaskService.DispatchTasks", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TaskService service

type TaskServiceHandler interface {
	CreateTask(context.Context, *CreateTaskRequest, *CreateTaskResponse) error
	GetTask(context.Context, *GetTaskRequest, *GetTaskResponse) error
	GetTasks(context.Context, *GetTasksRequest, *GetTasksResponse) error
	UpdateTask(context.Context, *UpdateTaskRequest, *emptypb.Empty) error
	DeleteTask(context.Context, *DeleteTaskRequest, *emptypb.Empty) error
	DispatchTasks(context.Context, *DispatchTasksRequest, *emptypb.Empty) error
}

func RegisterTaskServiceHandler(s server.Server, hdlr TaskServiceHandler, opts ...server.HandlerOption) error {
	type taskService interface {
		CreateTask(ctx context.Context, in *CreateTaskRequest, out *CreateTaskResponse) error
		GetTask(ctx context.Context, in *GetTaskRequest, out *GetTaskResponse) error
		GetTasks(ctx context.Context, in *GetTasksRequest, out *GetTasksResponse) error
		UpdateTask(ctx context.Context, in *UpdateTaskRequest, out *emptypb.Empty) error
		DeleteTask(ctx context.Context, in *DeleteTaskRequest, out *emptypb.Empty) error
		DispatchTasks(ctx context.Context, in *DispatchTasksRequest, out *emptypb.Empty) error
	}
	type TaskService struct {
		taskService
	}
	h := &taskServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&TaskService{h}, opts...))
}

type taskServiceHandler struct {
	TaskServiceHandler
}

func (h *taskServiceHandler) CreateTask(ctx context.Context, in *CreateTaskRequest, out *CreateTaskResponse) error {
	return h.TaskServiceHandler.CreateTask(ctx, in, out)
}

func (h *taskServiceHandler) GetTask(ctx context.Context, in *GetTaskRequest, out *GetTaskResponse) error {
	return h.TaskServiceHandler.GetTask(ctx, in, out)
}

func (h *taskServiceHandler) GetTasks(ctx context.Context, in *GetTasksRequest, out *GetTasksResponse) error {
	return h.TaskServiceHandler.GetTasks(ctx, in, out)
}

func (h *taskServiceHandler) UpdateTask(ctx context.Context, in *UpdateTaskRequest, out *emptypb.Empty) error {
	return h.TaskServiceHandler.UpdateTask(ctx, in, out)
}

func (h *taskServiceHandler) DeleteTask(ctx context.Context, in *DeleteTaskRequest, out *emptypb.Empty) error {
	return h.TaskServiceHandler.DeleteTask(ctx, in, out)
}

func (h *taskServiceHandler) DispatchTasks(ctx context.Context, in *DispatchTasksRequest, out *emptypb.Empty) error {
	return h.TaskServiceHandler.DispatchTasks(ctx, in, out)
}

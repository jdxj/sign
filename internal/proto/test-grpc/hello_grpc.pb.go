// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package test_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TestRPCClient is the client API for TestRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestRPCClient interface {
	Hello(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloRsp, error)
}

type testRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewTestRPCClient(cc grpc.ClientConnInterface) TestRPCClient {
	return &testRPCClient{cc}
}

func (c *testRPCClient) Hello(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloRsp, error) {
	out := new(HelloRsp)
	err := c.cc.Invoke(ctx, "/TestRPC/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestRPCServer is the server API for TestRPC service.
// All implementations must embed UnimplementedTestRPCServer
// for forward compatibility
type TestRPCServer interface {
	Hello(context.Context, *HelloReq) (*HelloRsp, error)
	mustEmbedUnimplementedTestRPCServer()
}

// UnimplementedTestRPCServer must be embedded to have forward compatible implementations.
type UnimplementedTestRPCServer struct {
}

func (UnimplementedTestRPCServer) Hello(context.Context, *HelloReq) (*HelloRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedTestRPCServer) mustEmbedUnimplementedTestRPCServer() {}

// UnsafeTestRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestRPCServer will
// result in compilation errors.
type UnsafeTestRPCServer interface {
	mustEmbedUnimplementedTestRPCServer()
}

func RegisterTestRPCServer(s grpc.ServiceRegistrar, srv TestRPCServer) {
	s.RegisterService(&TestRPC_ServiceDesc, srv)
}

func _TestRPC_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestRPCServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TestRPC/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestRPCServer).Hello(ctx, req.(*HelloReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TestRPC_ServiceDesc is the grpc.ServiceDesc for TestRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TestRPC",
	HandlerType: (*TestRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _TestRPC_Hello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test-grpc/hello.proto",
}

// TestMultiRPCClient is the client API for TestMultiRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestMultiRPCClient interface {
	World(ctx context.Context, in *WorldReq, opts ...grpc.CallOption) (*WorldRsp, error)
}

type testMultiRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewTestMultiRPCClient(cc grpc.ClientConnInterface) TestMultiRPCClient {
	return &testMultiRPCClient{cc}
}

func (c *testMultiRPCClient) World(ctx context.Context, in *WorldReq, opts ...grpc.CallOption) (*WorldRsp, error) {
	out := new(WorldRsp)
	err := c.cc.Invoke(ctx, "/TestMultiRPC/World", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestMultiRPCServer is the server API for TestMultiRPC service.
// All implementations must embed UnimplementedTestMultiRPCServer
// for forward compatibility
type TestMultiRPCServer interface {
	World(context.Context, *WorldReq) (*WorldRsp, error)
	mustEmbedUnimplementedTestMultiRPCServer()
}

// UnimplementedTestMultiRPCServer must be embedded to have forward compatible implementations.
type UnimplementedTestMultiRPCServer struct {
}

func (UnimplementedTestMultiRPCServer) World(context.Context, *WorldReq) (*WorldRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method World not implemented")
}
func (UnimplementedTestMultiRPCServer) mustEmbedUnimplementedTestMultiRPCServer() {}

// UnsafeTestMultiRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestMultiRPCServer will
// result in compilation errors.
type UnsafeTestMultiRPCServer interface {
	mustEmbedUnimplementedTestMultiRPCServer()
}

func RegisterTestMultiRPCServer(s grpc.ServiceRegistrar, srv TestMultiRPCServer) {
	s.RegisterService(&TestMultiRPC_ServiceDesc, srv)
}

func _TestMultiRPC_World_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorldReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestMultiRPCServer).World(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TestMultiRPC/World",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestMultiRPCServer).World(ctx, req.(*WorldReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TestMultiRPC_ServiceDesc is the grpc.ServiceDesc for TestMultiRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestMultiRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TestMultiRPC",
	HandlerType: (*TestMultiRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "World",
			Handler:    _TestMultiRPC_World_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test-grpc/hello.proto",
}

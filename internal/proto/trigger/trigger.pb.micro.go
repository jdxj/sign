// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: internal/proto/trigger/trigger.proto

package trigger

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for TriggerService service

func NewTriggerServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for TriggerService service

type TriggerService interface {
	CreateTrigger(ctx context.Context, in *CreateTriggerRequest, opts ...client.CallOption) (*emptypb.Empty, error)
	GetTriggers(ctx context.Context, in *GetTriggersRequest, opts ...client.CallOption) (*GetTriggersResponse, error)
}

type triggerService struct {
	c    client.Client
	name string
}

func NewTriggerService(name string, c client.Client) TriggerService {
	return &triggerService{
		c:    c,
		name: name,
	}
}

func (c *triggerService) CreateTrigger(ctx context.Context, in *CreateTriggerRequest, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "TriggerService.CreateTrigger", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerService) GetTriggers(ctx context.Context, in *GetTriggersRequest, opts ...client.CallOption) (*GetTriggersResponse, error) {
	req := c.c.NewRequest(c.name, "TriggerService.GetTriggers", in)
	out := new(GetTriggersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TriggerService service

type TriggerServiceHandler interface {
	CreateTrigger(context.Context, *CreateTriggerRequest, *emptypb.Empty) error
	GetTriggers(context.Context, *GetTriggersRequest, *GetTriggersResponse) error
}

func RegisterTriggerServiceHandler(s server.Server, hdlr TriggerServiceHandler, opts ...server.HandlerOption) error {
	type triggerService interface {
		CreateTrigger(ctx context.Context, in *CreateTriggerRequest, out *emptypb.Empty) error
		GetTriggers(ctx context.Context, in *GetTriggersRequest, out *GetTriggersResponse) error
	}
	type TriggerService struct {
		triggerService
	}
	h := &triggerServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&TriggerService{h}, opts...))
}

type triggerServiceHandler struct {
	TriggerServiceHandler
}

func (h *triggerServiceHandler) CreateTrigger(ctx context.Context, in *CreateTriggerRequest, out *emptypb.Empty) error {
	return h.TriggerServiceHandler.CreateTrigger(ctx, in, out)
}

func (h *triggerServiceHandler) GetTriggers(ctx context.Context, in *GetTriggersRequest, out *GetTriggersResponse) error {
	return h.TriggerServiceHandler.GetTriggers(ctx, in, out)
}

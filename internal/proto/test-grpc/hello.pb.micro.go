// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: test-grpc/hello.proto

package test_grpc

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for TestRPC service

func NewTestRPCEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for TestRPC service

type TestRPCService interface {
	Hello(ctx context.Context, in *HelloReq, opts ...client.CallOption) (*HelloRsp, error)
}

type testRPCService struct {
	c    client.Client
	name string
}

func NewTestRPCService(name string, c client.Client) TestRPCService {
	return &testRPCService{
		c:    c,
		name: name,
	}
}

func (c *testRPCService) Hello(ctx context.Context, in *HelloReq, opts ...client.CallOption) (*HelloRsp, error) {
	req := c.c.NewRequest(c.name, "TestRPC.Hello", in)
	out := new(HelloRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TestRPC service

type TestRPCHandler interface {
	Hello(context.Context, *HelloReq, *HelloRsp) error
}

func RegisterTestRPCHandler(s server.Server, hdlr TestRPCHandler, opts ...server.HandlerOption) error {
	type testRPC interface {
		Hello(ctx context.Context, in *HelloReq, out *HelloRsp) error
	}
	type TestRPC struct {
		testRPC
	}
	h := &testRPCHandler{hdlr}
	return s.Handle(s.NewHandler(&TestRPC{h}, opts...))
}

type testRPCHandler struct {
	TestRPCHandler
}

func (h *testRPCHandler) Hello(ctx context.Context, in *HelloReq, out *HelloRsp) error {
	return h.TestRPCHandler.Hello(ctx, in, out)
}

// Api Endpoints for TestMultiRPC service

func NewTestMultiRPCEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for TestMultiRPC service

type TestMultiRPCService interface {
	World(ctx context.Context, in *WorldReq, opts ...client.CallOption) (*WorldRsp, error)
}

type testMultiRPCService struct {
	c    client.Client
	name string
}

func NewTestMultiRPCService(name string, c client.Client) TestMultiRPCService {
	return &testMultiRPCService{
		c:    c,
		name: name,
	}
}

func (c *testMultiRPCService) World(ctx context.Context, in *WorldReq, opts ...client.CallOption) (*WorldRsp, error) {
	req := c.c.NewRequest(c.name, "TestMultiRPC.World", in)
	out := new(WorldRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TestMultiRPC service

type TestMultiRPCHandler interface {
	World(context.Context, *WorldReq, *WorldRsp) error
}

func RegisterTestMultiRPCHandler(s server.Server, hdlr TestMultiRPCHandler, opts ...server.HandlerOption) error {
	type testMultiRPC interface {
		World(ctx context.Context, in *WorldReq, out *WorldRsp) error
	}
	type TestMultiRPC struct {
		testMultiRPC
	}
	h := &testMultiRPCHandler{hdlr}
	return s.Handle(s.NewHandler(&TestMultiRPC{h}, opts...))
}

type testMultiRPCHandler struct {
	TestMultiRPCHandler
}

func (h *testMultiRPCHandler) World(ctx context.Context, in *WorldReq, out *WorldRsp) error {
	return h.TestMultiRPCHandler.World(ctx, in, out)
}
